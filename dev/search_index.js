var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Leonardo","category":"page"},{"location":"#Leonardo","page":"Home","title":"Leonardo","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Leonardo.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Leonardo]","category":"page"},{"location":"#Leonardo.AbstractArrow","page":"Home","title":"Leonardo.AbstractArrow","text":"Abstract type defining an arrow head character.\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.AbstractDirection","page":"Home","title":"Leonardo.AbstractDirection","text":"Abstract type defining a direction, used to define the surroundings of a ConnectorStyle, to define the EndStyle to draw paths, and to define the BoxStyle to draw boxes.\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.AbstractEnd","page":"Home","title":"Leonardo.AbstractEnd","text":"Abstract type defining an ending character for EndStyle and PathStyle.\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.AbstractFreeChar","page":"Home","title":"Leonardo.AbstractFreeChar","text":"Abstract type defining a free character, i.e. a character without any surrounding informations (no line size, no direction).\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.AbstractLineSize","page":"Home","title":"Leonardo.AbstractLineSize","text":"Abstract type defining the drawing size of a line. Subtypes are:\n\nNoLine\nLight\nHeavy\nDouble\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.AbstractLineType","page":"Home","title":"Leonardo.AbstractLineType","text":"Abstract type defining the type of line. Subtypes are:\n\nSolid\nDashed1\nDashed2\nDashed3\nHalf1\nHalf2\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.Bar","page":"Home","title":"Leonardo.Bar","text":"Type defining a bar character for an EndStyle.\n\nExample\n\njulia> Leonardo.char(Bar, Left, Heavy)\n'┣': Unicode U+2523 (category So: Symbol, other)\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.BlackArrow","page":"Home","title":"Leonardo.BlackArrow","text":"Type defining a black arrow head character for an EndStyle.\n\nExample\n\njulia> Leonardo.char(BlackArrow, Left)\n'◂': Unicode U+25C2 (category So: Symbol, other)\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.BlackRectangle","page":"Home","title":"Leonardo.BlackRectangle","text":"Type defining a black rectangle character.\n\nExample\n\njulia> Leonardo.char(BlackRectangle)\n'▮': Unicode U+25AE (category So: Symbol, other)\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.Canvas","page":"Home","title":"Leonardo.Canvas","text":"Canvas(width, height; [bgchar = ' '], [defstyle = PrintStyle()])\n\nDefine a drawing area of size widthxheight, where width (resp. height) is the number of charcters along the X (resp. Y) axis. bgchar is the background character by default it is a space. defstyle is the default PrintStyle used to print this Canvas. The origin of coordinate system is the upper left character:\n\n┌─────────────────────────────────────────────────────────────────────────────▸X\n│∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙\n│∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙\n│∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙\n│∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙\n│∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙\n│∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙\n│∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙\n│∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙\n│∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙\n│∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙\n│∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙\n│∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙\n│∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙\n│∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙\n│∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙\n│∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙\n│∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙\n▾\nY\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.ConnectorStyle","page":"Home","title":"Leonardo.ConnectorStyle","text":"ConnectorStyle(left, up, right, down)\n\nType defining a connector character. left, up, right and down are line styles surrounding the connector.\n\nSee biconnector, triconnector and quadriconnector for easy creation.\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.Dashed1","page":"Home","title":"Leonardo.Dashed1","text":"Type defining a dashed line.\n\nExample\n\njulia> c = Canvas(10, 1);\n\njulia> drawline!(c, (1,1), 10, Horizontal, LineStyle(Light, Dashed1))\n┄┄┄┄┄┄┄┄┄┄\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.Dashed2","page":"Home","title":"Leonardo.Dashed2","text":"Type defining a dashed line.\n\nExample\n\njulia> c = Canvas(10, 1);\n\njulia> drawline!(c, (1,1), 10, Horizontal, LineStyle(Light, Dashed2))\n┈┈┈┈┈┈┈┈┈┈\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.Dashed3","page":"Home","title":"Leonardo.Dashed3","text":"Type defining a dashed line.\n\nExample\n\njulia> c = Canvas(10, 1);\n\njulia> drawline!(c, (1,1), 10, Horizontal, LineStyle(Light, Dashed3))\n╌╌╌╌╌╌╌╌╌╌\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.Double","page":"Home","title":"Leonardo.Double","text":"Type defining a double sized line.\n\nExample\n\njulia> c = Canvas(10, 1);\n\njulia> drawline!(c, (1,1), 10, Horizontal, LineStyle(Double))\n══════════\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.Down","page":"Home","title":"Leonardo.Down","text":"Type defining a down direction, used to define the surroundings of a ConnectorStyle, to define the EndStyle to draw paths, and to define the BoxStyle to draw boxes.\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.EndStyle","page":"Home","title":"Leonardo.EndStyle","text":"EndStyle([EndType], [DirectionType], [LineStyleType = LineStyle(LightSolid)])\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.Half1","page":"Home","title":"Leonardo.Half1","text":"Type defining a half line type at the left for horizontal lines, or at the top for vertical lines.\n\nExample\n\njulia> c = Canvas(10, 1);\n\njulia> drawline!(c, (1,1), 10, Horizontal, LineStyle(Light, Half1))\n╴╴╴╴╴╴╴╴╴╴\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.Half2","page":"Home","title":"Leonardo.Half2","text":"Type defining a half line type at right left for horizontal lines, or at the bottom for vertical lines.\n\nExample\n\njulia> c = Canvas(10, 1);\n\njulia> drawline!(c, (1,1), 10, Horizontal, LineStyle(Light, Half2))\n╶╶╶╶╶╶╶╶╶╶\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.Heavy","page":"Home","title":"Leonardo.Heavy","text":"Type defining a heavy sized line.\n\nExample\n\nulia> c = Canvas(10, 1);\n\njulia> drawline!(c, (1,1), 10, Horizontal, LineStyle(Heavy))\n━━━━━━━━━━\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.Horizontal","page":"Home","title":"Leonardo.Horizontal","text":"Type defining a line with a horizontal orientation. See drawline! or drawpath! for usage.\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.LargeDot","page":"Home","title":"Leonardo.LargeDot","text":"Type defining a large dot character.\n\nExample\n\njulia> Leonardo.char(LargeDot)\n'•': Unicode U+2022 (category Po: Punctuation, other)\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.Left","page":"Home","title":"Leonardo.Left","text":"Type defining a left direction, used to define the surroundings of a ConnectorStyle, to define the EndStyle to draw paths, and to define the BoxStyle to draw boxes.\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.Light","page":"Home","title":"Leonardo.Light","text":"Type defining a light sized line.\n\nExample\n\njulia> c = Canvas(10, 1);\n\njulia> drawline!(c, (1,1), 10, Horizontal, LineStyle(Light))\n──────────\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.Lozenge","page":"Home","title":"Leonardo.Lozenge","text":"Type defining a lozenge character.\n\nExample\n\njulia> Leonardo.char(Lozenge)\n'◊': Unicode U+25CA (category So: Symbol, other)\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.NoDirection","page":"Home","title":"Leonardo.NoDirection","text":"Type defining no specific direction, only used by EndStyle for mutiple dispatch convenience.\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.NoEnd","page":"Home","title":"Leonardo.NoEnd","text":"Type used to define an EndStyle that will draw a normal line character.\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.NoLine","page":"Home","title":"Leonardo.NoLine","text":"Type defining a missing line, mainly used by 'ConnectorStyle'.\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.PrintStyle","page":"Home","title":"Leonardo.PrintStyle","text":"PrintStyle(; kwargs...)\n\nStore keyword arguments paased to the printstyled function:\n\nbold: false by default\ncolor: :normal by default\nblink: false by default\nreverse: false by default\nhidden: false by default\nunderline: false by default\n\nFor further details see printstyled documentation.\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.Right","page":"Home","title":"Leonardo.Right","text":"Type defining a right direction, used to define the surroundings of a ConnectorStyle, to define the EndStyle to draw paths, and to define the BoxStyle to draw boxes.\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.SmallDot","page":"Home","title":"Leonardo.SmallDot","text":"Type defining a small dot character.\n\nExample\n\njulia> Leonardo.char(SmallDot)\n'∙': Unicode U+2219 (category Sm: Symbol, math)\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.Solid","page":"Home","title":"Leonardo.Solid","text":"Type defining a solid line.\n\nExample\n\njulia> c = Canvas(10, 1);\n\njulia> drawline!(c, (1,1), 10, Horizontal, LineStyle(Light, Solid))\n──────────\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.Up","page":"Home","title":"Leonardo.Up","text":"Type defining an up direction, used to define the surroundings of a ConnectorStyle, to define the EndStyle to draw paths, and to define the BoxStyle to draw boxes.\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.Vertical","page":"Home","title":"Leonardo.Vertical","text":"Type defining a line with a vertical orientation. See drawline! or drawpath! for usage.\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.WhiteArrow","page":"Home","title":"Leonardo.WhiteArrow","text":"Type defining a white arrow head character for an EndStyle.\n\nExample\n\njulia> Leonardo.char(WhiteArrow, Left)\n'◃': Unicode U+25C3 (category So: Symbol, other)\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.WhiteRectangle","page":"Home","title":"Leonardo.WhiteRectangle","text":"Type defining a white rectangle character.\n\nExample\n\njulia> Leonardo.char(WhiteRectangle)\n'▯': Unicode U+25AF (category So: Symbol, other)\n\n\n\n\n\n","category":"type"},{"location":"#Leonardo.biconnector","page":"Home","title":"Leonardo.biconnector","text":"biconnector(ldir1, lstyle1, ldir2, lstyle2)\n\nCreate a ConnectorStyle between two lines with line styles lstyle1 and lstyle2 and with positions ldir1 and ldir2.\n\nExample\n\njulia> c = Canvas(10, 1);\n\njulia> l1 = LineStyle(Light);\n\njulia> l2 = LineStyle(Heavy, Half1);\n\njulia> drawline!(c, (1,1), 4, Horizontal, l1)\n────\n\n\njulia> drawline!(c, (6,1), 4, Horizontal, l2)\n──── ╸╸╸╸\n\n\njulia> bc = biconnector(Left, l1, Right, l2);\n\njulia> drawconnector!(c, (5,1), bc)\n────╼╸╸╸╸\n\n\n\n\n\n\n\n","category":"function"},{"location":"#Leonardo.drawboxtext!-Union{Tuple{B}, Tuple{O}, Tuple{Any, Any, Any, Type{O}}, Tuple{Any, Any, Any, Type{O}, Type{B}}, Tuple{Any, Any, Any, Type{O}, Type{B}, Any}} where {O, B}","page":"Home","title":"Leonardo.drawboxtext!","text":"drawboxtext!(canvas, (x,y), text, ori, bstyle, [prstyle = defstyle(canvas)])\n\nSimilar to [drawtext!], but with a bounding box defined by the boxstyle bstyle.\n\nSee also drawtext! and BoxStyle.\n\nExample\n\njulia> c = Canvas(80, 8);\n\njulia> bs = BoxStyle(LineStyle(Heavy))\nBoxStyle{LineStyle{Heavy, Solid}, LineStyle{Light, Solid}, LineStyle{Heavy, Solid}, LineStyle{Light, Solid}}\n\njulia> drawboxtext!(c, (5,5), \"The Hitchhiker's Guide\nto the Galaxy\", Horizontal, bs)\n\n\n\n   ┎──────────────────────┒\n   ┃The Hitchhiker's Guide┃\n   ┃to the Galaxy         ┃\n   ┖──────────────────────┚\n\n\n\n\n\n\n\n\n","category":"method"},{"location":"#Leonardo.drawconnector!-Union{Tuple{D}, Tuple{TD}, Tuple{SD}, Tuple{R}, Tuple{TR}, Tuple{SR}, Tuple{U}, Tuple{TU}, Tuple{SU}, Tuple{L}, Tuple{TL}, Tuple{SL}, Tuple{Any, Any, Type{ConnectorStyle{L, U, R, D}}}, Tuple{Any, Any, Type{ConnectorStyle{L, U, R, D}}, Any}} where {SL, TL, L<:LineStyle{SL, TL}, SU, TU, U<:LineStyle{SU, TU}, SR, TR, R<:LineStyle{SR, TR}, SD, TD, D<:LineStyle{SD, TD}}","page":"Home","title":"Leonardo.drawconnector!","text":"drawconnector!(canvas, (x,y), cstyle, [prstyle = defstyle(canvas)])\n\nDraw a connector at location (x,y), with a connector style cstyle.\n\nSee biconnector, triconnector and quadriconnector for usage examples.\n\n\n\n\n\n","category":"method"},{"location":"#Leonardo.drawtext!-Union{Tuple{O}, Tuple{Any, Any, Any, Type{O}}, Tuple{Any, Any, Any, Type{O}, Any}} where O","page":"Home","title":"Leonardo.drawtext!","text":"drawtext!(canvas, (x,y), text, ori, [prstyle = defstyle(canvas)])\n\nDraw a string text string at location (x,y). ori indicates the text orientation, either Horizontal or Vertical. prstyle defines the print style for REPL rendering.\n\nExample\n\njulia> c = Canvas(80, 15);\n\njulia> drawtext!(c, (5,10), \"So Long,\nand Thanks for All the Fish\", Horizontal);\n\njulia> ps = PrintStyle(color = :red, blink = true);\n\njulia> drawtext!(c, (60,1), \"Mostly Harmless\", Vertical, ps);\n\njulia> c\n                                                           M\n                                                           o\n                                                           s\n                                                           t\n                                                           l\n                                                           y\n\n                                                           H\n                                                           a\n    So Long,                                               r\n    and Thanks for All the Fish                            m\n                                                           l\n                                                           e\n                                                           s\n                                                           s\n\n\n\n\n\n\n\n","category":"method"},{"location":"#Leonardo.quadriconnector","page":"Home","title":"Leonardo.quadriconnector","text":"quadriconnector(ldir1, lstyle1, ldir2, lstyle2, ldir3, lstyle3, ldir4, lstyle4)\n\nCreate a ConnectorStyle between four lines with line styles lstyle1, lstyle2, lstyle3, and lstyle4 and with positions ldir1, ldir2, ldir3 and ldir4.\n\nExample\n\njulia> c = Canvas(10, 5);\n\njulia> l1 = LineStyle(Double);\n\njulia> l2 = LineStyle(Double);\n\njulia> l3 = LineStyle(Dashed1);\n\njulia> l4 = LineStyle(Dashed3);\n\njulia> drawline!(c, (1,3), 4, Horizontal, l1);\n\njulia> drawline!(c, (6,3), 4, Horizontal, l2);\n\njulia> drawline!(c, (5,4), 2, Vertical, l3);\n\njulia> drawline!(c, (5,2), -2, Vertical, l4);\n\njulia> c\n    ╎\n    ╎\n════ ════\n    ┆\n    ┆\n\n\njulia> qc = quadriconnector(Left, l1, Right, l2, Down, l3, Up, l4);\n\njulia> drawconnector!(c, (5,3), qc)\n    ╎\n    ╎\n════╪════\n    ┆\n    ┆\n\n\n\n\n\n\n\n","category":"function"},{"location":"#Leonardo.triconnector","page":"Home","title":"Leonardo.triconnector","text":"triconnector(ldir1, lstyle1, ldir2, lstyle2, ldir3, lstyle3)\n\nCreate a ConnectorStyle between three lines with line styles lstyle1, lstyle2 and lstyle3 and with positions ldir1, ldir2 and ldir3.\n\nExample\n\njulia> c = Canvas(10, 3);\n\njulia> l1 = LineStyle(Double);\n\njulia> l2 = LineStyle(Double);\n\njulia> l3 = LineStyle();\n\njulia> drawline!(c, (1,1), 4, Horizontal, l1);\n\njulia> drawline!(c, (6,1), 4, Horizontal, l2);\n\njulia> drawline!(c, (5,2), 2, Vertical, l3);\n\njulia> c\n════ ════\n    │\n    │\n\n\njulia> tc = triconnector(Left, l1, Right, l2, Down, l3);\n\njulia> drawconnector!(c, (5,1), tc)\n════╤════\n    │\n    │\n\n\n\n\n\n\n\n","category":"function"}]
}
